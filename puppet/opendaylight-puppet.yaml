heat_template_version: 2015-04-30

description: >
  OpenDaylight node configured by Puppet.

parameters:
  OpenDaylightFlavor:
    default: baremetal
    description: The flavor to use for the OpenDaylight node
    type: string
  OpenDaylightImage:
    default: overcloud-full
    description: The image to use for the OpenDaylight node
    type: string
  OpenDaylightHostname:
    default: opendaylight-server
    description: The hostname to use for the OpenDaylight node
    type: string
  OpenDaylightUsername:
    default: admin
    description: The admin user for the OpenDaylight node
    type: string
  OpenDaylightPassword:
    default: ''
    description: The admin password for the OpenDaylight node
    type: string
    hidden: true
  OpenDaylightPort:
    default: 8081
    description: Set OpenDaylight service port
    type: number
  KeyName:
    description: The keypair to use for SSH access to the node (via heat-admin user)
    type: string
    default: default
    constraints:
      - custom_constraint: nova.keypair
  ImageUpdatePolicy:
    default: 'REBUILD_PRESERVE_EPHEMERAL'
    description: What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.
    type: string
  UpdateIdentifier:
    default: ''
    type: string
    description: >
      Setting to a previously unused value during stack-update will trigger
      package update on all nodes
  NtpServer:
    type: string
    default: ''
  PublicInterface:
    default: nic1
    description: What interface to bridge onto br-ex for network nodes.
    type: string

resources:
  OpenDaylightNode:
    type: OS::Nova::Server
    properties:
      image: {get_param: OpenDaylightImage}
      image_update_policy: {get_param: ImageUpdatePolicy}
      flavor: {get_param: OpenDaylightFlavor}
      key_name: {get_param: KeyName}
      networks:
        - network: ctlplane
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: NodeUserData}
      name: {get_param: OpenDaylightHostname}

  NodeUserData:
    type: OS::TripleO::NodeUserData

  ExternalPort:
    type: OS::TripleO::Controller::Ports::ExternalPort
    properties:
      ControlPlaneIP: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}

  InternalApiPort:
    type: OS::TripleO::Controller::Ports::InternalApiPort
    properties:
      ControlPlaneIP: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}

  NetIpMap:
    type: OS::TripleO::Network::Ports::NetIpMap
    properties:
      ControlPlaneIp: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}
      ExternalIp: {get_attr: [ExternalPort, ip_address]}
      InternalApiIp: {get_attr: [InternalApiPort, ip_address]}

  NetIpSubnetMap:
    type: OS::TripleO::Network::Ports::NetIpSubnetMap
    properties:
      ControlPlaneIp: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}

  NetworkConfig:
    type: OS::TripleO::Controller::Net::SoftwareConfig
    properties:
      ControlPlaneIp: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}

  NetworkDeployment:
    type: OS::TripleO::SoftwareDeployment
    properties:
      config: {get_resource: NetworkConfig}
      server: {get_resource: OpenDaylightNode}
      input_values:
        bridge_name: br-ex
        interface_name: {get_param: PublicInterface}

  OpenDaylightDeployment:
    type: OS::TripleO::SoftwareDeployment
    depends_on: NetworkDeployment
    properties:
      config: {get_resource: OpenDaylightConfig}
      server: {get_resource: OpenDaylightNode}
      input_values:
        ntp_servers:
          str_replace:
            template: '["server"]'
            params:
              server: {get_param: NtpServer}
        opendaylight_port: {get_param: OpenDaylightPort}

  OpenDaylightConfig:
    type: OS::Heat::StructuredConfig
    properties:
      group: os-apply-config
      config:
        hiera:
          hierarchy:
            - '"%{::uuid}"'
            - heat_config_%{::deploy_config_name}
            - extraconfig
            - bootstrap_node # provided by BootstrapNodeConfig
            - all_nodes # provided by allNodesConfig
            - vip_data # provided by vip-config
            - RedHat # Workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1236143
            - common
          datafiles:
            common:
              raw_data: {get_file: hieradata/common.yaml}
              mapped_data:
                ntp::servers: {get_input: ntp_servers}
                opendaylight::admin_username: {get_param: OpenDaylightUsername}
                opendaylight::admin_password: {get_param: OpenDaylightPassword}
                opendaylight_port: {get_input: opendaylight_port}
            ceph:
              raw_data: {get_file: hieradata/ceph.yaml}

  UpdateConfig:
    type: OS::TripleO::Tasks::PackageUpdate

  UpdateDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config: {get_resource: UpdateConfig}
      server: {get_resource: OpenDaylightNode}
      input_values:
        update_identifier:
          get_param: UpdateIdentifier

  OpenDaylightHostsConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/usr/bin/env bash
        echo -e "$(facter ipaddress)\t\t$(hostname -f)\t$(hostname -s)" >> /etc/hosts

  OpenDaylightHostsDeployment:
    type: OS::Heat::StructuredDeployment
    depends_on: OpenDaylightDeployment
    properties:
      server: {get_resource: OpenDaylightNode}
      config: {get_resource: OpenDaylightHostsConfig}

  OpenDaylightPuppetConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      config:
        get_file: manifests/overcloud_opendaylight.pp

  OpenDaylightPuppetDeployment:
    depends_on: OpenDaylightHostsDeployment
    type: OS::Heat::StructuredDeployment
    properties:
      server: {get_resource: OpenDaylightNode}
      config: {get_resource: OpenDaylightPuppetConfig}
      input_values:
        update_identifier: {get_param: UpdateIdentifier}

outputs:
  ip_address:
    description: IP address of the server in the ctlplane network
    value: {get_attr: [OpenDaylightNode, networks, ctlplane, 0]}
  opendaylight_controller_ip:
    description: IP address of the server on the internal network
    value: {get_attr: [InternalApiPort, ip_address]}
  config_identifier:
    description: identifier which changes if the node configuration may need re-applying
    value:
      list_join:
      - ','
      - - {get_attr: [OpenDaylightDeployment, deploy_stdout]}
        - {get_param: UpdateIdentifier}
